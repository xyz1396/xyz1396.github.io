<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Sipros stable isotope probe 13C labeled metaproteomic tutorial</title>
    <url>/2023/04/17/Sipros-stable-isotope-probe-13C-labeled-metaproteomic-tutorial/</url>
    <content><![CDATA[<p>This tutorial shows how to perform stable isotope labeling (SIP) proteomics search using Sipros on 13C-labeled E. coli DDA mass spectrometry data. This workflow works on WSL Ubuntu 20.04 in Windows 11 and CentOS 7.</p>
<h3 id="Install-environment"><a href="#Install-environment" class="headerlink" title="Install environment"></a>Install environment</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">conda create -n py2 scikit-learn python=2.7</span><br><span class="line">conda create -n mono -c conda-forge mono</span><br><span class="line">conda create -n r -c conda-forge -c bioconda r-base r-stringr r-tidyr bioconductor-biostrings</span><br></pre></td></tr></table></figure>

<h3 id="Make-folder-for-the-workflow"><a href="#Make-folder-for-the-workflow" class="headerlink" title="Make folder for the workflow"></a>Make folder for the workflow</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir fasta raw ft regular sip configs bin</span><br></pre></td></tr></table></figure>

<h3 id="Download-raw-file"><a href="#Download-raw-file" class="headerlink" title="Download raw file"></a>Download raw file</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd raw</span><br><span class="line"># Download raw file with 1% 13C</span><br><span class="line">wget ftp://ftp.pride.ebi.ac.uk/pride/data/archive/2023/04/PXD041414/Pan_062822_X1iso5.raw</span><br><span class="line"># Download raw file with 50% 13C</span><br><span class="line">wget ftp://ftp.pride.ebi.ac.uk/pride/data/archive/2023/04/PXD041414/Pan_052322_X13.raw</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h3 id="Download-Sipros-program"><a href="#Download-Sipros-program" class="headerlink" title="Download Sipros program"></a>Download Sipros program</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd bin</span><br><span class="line">wget https://github.com/xyz1396/SiprosToolKits/releases/download/4.0/siprosRelease.zip</span><br><span class="line">unzip siprosRelease.zip</span><br><span class="line">chmod +x bin/*</span><br></pre></td></tr></table></figure>

<p>“FASTA_Database &#x3D; “ may be changed to your fasta file path in .cfg file</p>
<h3 id="Convert-Raw-files"><a href="#Convert-Raw-files" class="headerlink" title="Convert Raw files"></a>Convert Raw files</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">conda activate mono</span><br><span class="line"># -j is the threads that you want to limit</span><br><span class="line">mono bin/bin/Raxport.exe -i raw -o ft -j 8</span><br></pre></td></tr></table></figure>

<h3 id="Make-fasta-database-with-reverse-decoy"><a href="#Make-fasta-database-with-reverse-decoy" class="headerlink" title="Make fasta database with reverse decoy"></a>Make fasta database with reverse decoy</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd fasta</span><br><span class="line"># download E. coli protein fasta sequence</span><br><span class="line">wget https://ftp.uniprot.org/pub/databases/uniprot/knowledgebase/reference_proteomes/Bacteria/UP000000625/UP000000625_83333.fasta.gz</span><br><span class="line">gunzip UP000000625_83333.fasta.gz</span><br><span class="line"></span><br><span class="line">conda activate py2</span><br><span class="line"># make reverse</span><br><span class="line">python ../bin/EnsembleScripts/sipros_prepare_protein_database.py \</span><br><span class="line">    -i UP000000625_83333.fasta \</span><br><span class="line">    -o Decoy.fasta \</span><br><span class="line">    -c ../bin/configTemplates/SiprosEnsembleConfig.cfg</span><br></pre></td></tr></table></figure>

<h3 id="Unlabeled-search"><a href="#Unlabeled-search" class="headerlink" title="Unlabeled search"></a>Unlabeled search</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># OMP_NUM_THREADS is the threads that you want to limit</span><br><span class="line">export OMP_NUM_THREADS=10</span><br><span class="line"># search the scans against the fasta database, this command will take a long time</span><br><span class="line">bin/bin/SiprosEnsembleOMP -f ft/Pan_062822_X1iso5.FT2 -c bin/configTemplates/SiprosEnsembleConfig.cfg -o regular</span><br><span class="line"></span><br><span class="line">conda activate py2</span><br><span class="line"># convert .Spe2Pep.txt file to .tab file</span><br><span class="line">python bin/EnsembleScripts/sipros_psm_tabulating.py \</span><br><span class="line">    -i regular -c bin/configTemplates/SiprosEnsembleConfig.cfg \</span><br><span class="line">    -o regular</span><br><span class="line"># filter PSMs, output qualified PSMs to .psm.txt file</span><br><span class="line">python bin/EnsembleScripts/sipros_ensemble_filtering.py \</span><br><span class="line">       -i regular \</span><br><span class="line">       -c bin/configTemplates/SiprosEnsembleConfig.cfg \</span><br><span class="line">       -o regular</span><br><span class="line"># assembly protein groups from peptide, output proteins to .pro.txt</span><br><span class="line">python bin/EnsembleScripts/sipros_peptides_assembling.py \</span><br><span class="line">    -c bin/configTemplates/SiprosEnsembleConfig.cfg \</span><br><span class="line">    -w regular</span><br><span class="line"></span><br><span class="line">conda activate r</span><br><span class="line"># control FDR, output qualified protein groups to .proRefineFDR.txt</span><br><span class="line">Rscript bin/V4Scripts/refineProteinFDR.R -pro regular/*.pro.txt -psm regular/*.psm.txt -fdr 0.005 -o regular/coli</span><br><span class="line"># get spectra count of each protein groups, output spectra count to .SPcount.txt</span><br><span class="line">Rscript bin/V4Scripts/getSpectraCountInEachFT.R -pro regular/*.proRefineFDR.txt -psm regular/*.psm.txt -o regular/coli</span><br></pre></td></tr></table></figure>

<h3 id="Labeled-search"><a href="#Labeled-search" class="headerlink" title="Labeled search"></a>Labeled search</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># generate configs</span><br><span class="line">bin/bin/configGenerator -i bin/configTemplates/SiprosV4Config.cfg -o configs -e C</span><br><span class="line"></span><br><span class="line">conda activate r</span><br><span class="line"></span><br><span class="line"># make db of identified proteins by SiprosEnsemble</span><br><span class="line"># if protein database is small, this step can be ignored</span><br><span class="line"># orginal protein database is also OK</span><br><span class="line">Rscript bin/V4Scripts/makeDBforLabelSearch.R \</span><br><span class="line">    -pro regular/Pan_062822_X1iso5.SE.pro.txt \</span><br><span class="line">    -faa fasta/UP000000625_83333.fasta \</span><br><span class="line">    -o fasta/db.faa</span><br><span class="line"></span><br><span class="line"># search the scans against the fasta database, this command will take a long time</span><br><span class="line"># OMP_NUM_THREADS is the threads that you want to limit</span><br><span class="line">export OMP_NUM_THREADS=10</span><br><span class="line">configs=(configs/*.cfg)</span><br><span class="line">echo &quot;$&#123;configs[@]&#125;&quot; | xargs -n 1 -P 8 \</span><br><span class="line">        bash -c &#x27;bin/bin/SiprosV4OMP -f ft/Pan_052322_X13.FT2 -c $0 -o sip&#x27;</span><br><span class="line"></span><br><span class="line">conda activate py2</span><br><span class="line"></span><br><span class="line"># filter PSMs</span><br><span class="line">python bin/V4Scripts/sipros_peptides_filtering.py \</span><br><span class="line">    -c bin/configTemplates/SiprosV4Config.cfg \</span><br><span class="line">    -w sip</span><br><span class="line"></span><br><span class="line"># filter proteins</span><br><span class="line">python bin/V4Scripts/sipros_peptides_assembling.py \</span><br><span class="line">    -c bin/configTemplates/SiprosV4Config.cfg \</span><br><span class="line">    -w sip</span><br><span class="line"></span><br><span class="line"># cluster SIP abundance of protein</span><br><span class="line">python bin/V4Scripts/ClusterSip.py \</span><br><span class="line">    -c bin/configTemplates/SiprosV4Config.cfg \</span><br><span class="line">    -w sip</span><br><span class="line"></span><br><span class="line">conda activate r</span><br><span class="line"></span><br><span class="line"># refine protein FDR</span><br><span class="line">Rscript bin/V4Scripts/refineProteinFDR.R \</span><br><span class="line">    -pro sip/*.pro.txt \</span><br><span class="line">    -psm sip/*.psm.txt \</span><br><span class="line">    -fdr 0.01 \</span><br><span class="line">    -o sip/coli</span><br><span class="line"></span><br><span class="line"># get SIP abundance of each protein in each FT2 file</span><br><span class="line">Rscript bin/V4Scripts/getLabelPCTinEachFT.R \</span><br><span class="line">    -pro sip/coli.proRefineFDR.txt \</span><br><span class="line">    -psm sip/*.psm.txt \</span><br><span class="line">    -thr 5 \</span><br><span class="line">    -o sip/coli</span><br></pre></td></tr></table></figure>

<p>The isotopic abundance of PSMs and peptides is in the “SearchName” column in *.psm.txt. The percentage in “SearchName” is multiplied by 1000</p>
<p>The isotopic abundance of Proteins is in the “AverageEnrichmentLevel” column in *.pro.cluster.txt and in *.LabelPCTcount.txt. The percentage in “AverageEnrichmentLevel” is multiplied by 1000</p>
]]></content>
      <categories>
        <category>metagenomic</category>
        <category>proteomic</category>
        <category>metaproteomic</category>
        <category>SIP</category>
      </categories>
      <tags>
        <tag>metagenomic</tag>
        <tag>proteomic</tag>
        <tag>metaproteomic</tag>
        <tag>SIP</tag>
      </tags>
  </entry>
  <entry>
    <title>16S amplicon tutorial</title>
    <url>/2022/03/19/16S-amplicon-tutorial/</url>
    <content><![CDATA[<h1 id="Import-fastq-to-Qiime2"><a href="#Import-fastq-to-Qiime2" class="headerlink" title="Import fastq to Qiime2"></a>Import fastq to Qiime2</h1><h2 id="Illumina-single-end"><a href="#Illumina-single-end" class="headerlink" title="Illumina single end"></a>Illumina single end</h2><h3 id="Splited-fastq-file"><a href="#Splited-fastq-file" class="headerlink" title="Splited fastq file"></a>Splited fastq file</h3><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">QCstat<span class="operator">&lt;-</span>read.table<span class="punctuation">(</span><span class="string">&quot;01.CleanData/QCstat.xls&quot;</span><span class="punctuation">,</span>skip <span class="operator">=</span> <span class="number">1</span><span class="punctuation">)</span></span><br><span class="line">colnames<span class="punctuation">(</span>QCstat<span class="punctuation">)</span> <span class="operator">&lt;-</span></span><br><span class="line">  <span class="built_in">c</span><span class="punctuation">(</span></span><br><span class="line">    <span class="string">&#x27;Sample Name&#x27;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&#x27;Raw PE(#)&#x27;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&#x27;Combined(#)&#x27;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&#x27;Qualified(#)&#x27;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&#x27;Nochime(#)&#x27;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&#x27;Base(nt)&#x27;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&#x27;AvgLen(nt)&#x27;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&#x27;Q20&#x27;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&#x27;Q30&#x27;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&#x27;GC%&#x27;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&#x27;Effective%&#x27;</span></span><br><span class="line">  <span class="punctuation">)</span></span><br><span class="line">sampleName<span class="operator">&lt;-</span>QCstat<span class="operator">$</span>`Sample Name`</span><br><span class="line">df <span class="operator">&lt;-</span> data.frame<span class="punctuation">(</span></span><br><span class="line">  `sample-id` <span class="operator">=</span> sampleName<span class="punctuation">,</span></span><br><span class="line">  `absolute-filepath` <span class="operator">=</span> paste0<span class="punctuation">(</span></span><br><span class="line">    <span class="string">&quot;/mnt/e/xiongyi/Chile/01.CleanData/&quot;</span><span class="punctuation">,</span></span><br><span class="line">    sampleName<span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;/&quot;</span><span class="punctuation">,</span></span><br><span class="line">    sampleName<span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;.fastq&quot;</span></span><br><span class="line">  <span class="punctuation">)</span><span class="punctuation">,</span></span><br><span class="line">  stringsAsFactors <span class="operator">=</span> <span class="built_in">F</span></span><br><span class="line"><span class="punctuation">)</span></span><br><span class="line">colnames<span class="punctuation">(</span>df<span class="punctuation">)</span> <span class="operator">&lt;-</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="string">&quot;sample-id&quot;</span><span class="punctuation">,</span> <span class="string">&quot;absolute-filepath&quot;</span><span class="punctuation">)</span></span><br><span class="line">write.table<span class="punctuation">(</span></span><br><span class="line">  df<span class="punctuation">,</span></span><br><span class="line">  <span class="string">&quot;metadata.tsv&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="built_in">quote</span> <span class="operator">=</span> <span class="built_in">F</span><span class="punctuation">,</span></span><br><span class="line">  row.names <span class="operator">=</span> <span class="built_in">F</span><span class="punctuation">,</span></span><br><span class="line">  sep <span class="operator">=</span> <span class="string">&quot;\t&quot;</span></span><br><span class="line"><span class="punctuation">)</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/miniconda3/etc/profile.d/conda.sh</span><br><span class="line">conda activate qiime2</span><br><span class="line"><span class="built_in">mkdir</span> qualityTest</span><br><span class="line"><span class="built_in">cd</span> qualityTest</span><br><span class="line">fastp -i ../01.CleanData/D1/D1.fastq -o D1.filterd.fq</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p><a href="https://view.qiime2.org/">View qzv file</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/miniconda3/etc/profile.d/conda.sh</span><br><span class="line">conda activate qiime2</span><br><span class="line">qiime tools import \</span><br><span class="line">  --<span class="built_in">type</span> <span class="string">&#x27;SampleData[SequencesWithQuality]&#x27;</span> \</span><br><span class="line">  --input-path metadata.tsv \</span><br><span class="line">  --output-path chile.qza \</span><br><span class="line">  --input-format SingleEndFastqManifestPhred33V2</span><br><span class="line"></span><br><span class="line"><span class="comment"># check quality</span></span><br><span class="line">qiime demux summarize \</span><br><span class="line">    --i-data chile.qza \</span><br><span class="line">    --o-visualization chileSummary.qzv</span><br></pre></td></tr></table></figure>

<h2 id="Illumina-paried-end"><a href="#Illumina-paried-end" class="headerlink" title="Illumina paried end"></a>Illumina paried end</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/miniconda3/etc/profile.d/conda.sh</span><br><span class="line">conda activate qiime2</span><br><span class="line">qiime tools import \</span><br><span class="line">  --<span class="built_in">type</span> MultiplexedPairedEndBarcodeInSequence \</span><br><span class="line">  --input-path ../data/fastq \</span><br><span class="line">  --output-path ../temp/multiplexed-seqs.qza</span><br></pre></td></tr></table></figure>

<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">df<span class="operator">&lt;-</span>read.table<span class="punctuation">(</span><span class="string">&quot;../data/mapping.txt&quot;</span><span class="punctuation">,</span>header <span class="operator">=</span> <span class="built_in">F</span><span class="punctuation">)</span></span><br><span class="line">df2<span class="operator">&lt;-</span>data.frame<span class="punctuation">(</span></span><br><span class="line">  `sample-id` <span class="operator">=</span> paste0<span class="punctuation">(</span><span class="string">&quot;J&quot;</span><span class="punctuation">,</span>df<span class="operator">$</span>V1<span class="punctuation">)</span><span class="punctuation">,</span></span><br><span class="line">  barcode<span class="operator">=</span>df<span class="operator">$</span>V2</span><br><span class="line"><span class="punctuation">)</span></span><br><span class="line">colnames<span class="punctuation">(</span>df2<span class="punctuation">)</span> <span class="operator">&lt;-</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="string">&quot;sample-id&quot;</span><span class="punctuation">,</span> <span class="string">&quot;Barcode&quot;</span><span class="punctuation">)</span></span><br><span class="line">write.table<span class="punctuation">(</span></span><br><span class="line">  df2<span class="punctuation">,</span></span><br><span class="line">  <span class="string">&quot;../data/metadata.tsv&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="built_in">quote</span> <span class="operator">=</span> <span class="built_in">F</span><span class="punctuation">,</span></span><br><span class="line">  row.names <span class="operator">=</span> <span class="built_in">F</span><span class="punctuation">,</span></span><br><span class="line">  sep <span class="operator">=</span> <span class="string">&quot;\t&quot;</span></span><br><span class="line"><span class="punctuation">)</span></span><br></pre></td></tr></table></figure>

<h2 id="Demux"><a href="#Demux" class="headerlink" title="Demux"></a>Demux</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/miniconda3/etc/profile.d/conda.sh</span><br><span class="line">conda activate qiime2</span><br><span class="line"><span class="comment"># change tmp path</span></span><br><span class="line"><span class="comment"># export TMPDIR=/mnt/f/qiimeTMP </span></span><br><span class="line">qiime cutadapt demux-paired \</span><br><span class="line">  --i-seqs ../temp/multiplexed-seqs.qza \</span><br><span class="line">  --m-forward-barcodes-file ../data/metadata.tsv \</span><br><span class="line">  --m-forward-barcodes-column Barcode \</span><br><span class="line">  --p-error-rate 0 \</span><br><span class="line">  --o-per-sample-sequences ../temp/demultiplexed-seqs.qza \</span><br><span class="line">  --o-untrimmed-sequences ../temp/untrimmed.qza \</span><br><span class="line">  --verbose &amp;&gt; ../temp/demux.txt</span><br></pre></td></tr></table></figure>

<h2 id="Trim-adapters"><a href="#Trim-adapters" class="headerlink" title="Trim adapters"></a>Trim adapters</h2><p>Note: This adapter seq is as same as the forward primer</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/miniconda3/etc/profile.d/conda.sh</span><br><span class="line">conda activate qiime2</span><br><span class="line">qiime cutadapt trim-paired \</span><br><span class="line">  --i-demultiplexed-sequences ../temp/demultiplexed-seqs.qza \</span><br><span class="line">  --p-front-f GTGCCAGCMGCCGCGG \</span><br><span class="line">  --p-error-rate 0 \</span><br><span class="line">  --o-trimmed-sequences ../temp/trimmed-seqs.qza \</span><br><span class="line">  --verbose &amp;&gt; ../temp/trim.txt</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/miniconda3/etc/profile.d/conda.sh</span><br><span class="line">conda activate qiime2</span><br><span class="line">qiime demux summarize \</span><br><span class="line">  --i-data ../temp/trimmed-seqs.qza \</span><br><span class="line">  --o-visualization ../temp/trimmed-seqs.qzv</span><br></pre></td></tr></table></figure>

<h2 id="Remove-primer"><a href="#Remove-primer" class="headerlink" title="Remove primer"></a>Remove primer</h2><p>515F GTGCCAGCMGCCGCGG 907R CCGTCAATTCMTTTRAGTTT</p>
<p>remove sequence shorter than 300</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">library<span class="punctuation">(</span>Biostrings<span class="punctuation">)</span></span><br><span class="line"><span class="comment"># CCGTCAATTCMTTTRAGTTT...CCGCGGCKGCTGGCAC</span></span><br><span class="line">reverseComplement<span class="punctuation">(</span>DNAString<span class="punctuation">(</span><span class="string">&quot;GTGCCAGCMGCCGCGG...AAACTYAAAKGAATTGACGG&quot;</span><span class="punctuation">)</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/miniconda3/etc/profile.d/conda.sh</span><br><span class="line">conda activate qiime2</span><br><span class="line">qiime cutadapt trim-paired \</span><br><span class="line">  --p-cores 6 \</span><br><span class="line">  --i-demultiplexed-sequences ../temp/trimmed-seqs.qza \</span><br><span class="line">  --p-adapter-f GTGCCAGCMGCCGCGG...AAACTYAAAKGAATTGACGG \</span><br><span class="line">  --p-adapter-r CCGTCAATTCMTTTRAGTTT...CCGCGGCKGCTGGCAC \</span><br><span class="line">  --p-error-rate 0.2 \</span><br><span class="line">  --o-trimmed-sequences ../temp/primer_trimed.qza \</span><br><span class="line">  --verbose &amp;&gt; ../temp/primer_trimed.log</span><br><span class="line">  </span><br><span class="line">qiime demux summarize \</span><br><span class="line">    --i-data ../temp/primer_trimed.qza \</span><br><span class="line">    --o-visualization ../temp/primer_trimed.qcSummary.qzv</span><br></pre></td></tr></table></figure>

<h1 id="Import-Roche-454-sff-to-Qiime2"><a href="#Import-Roche-454-sff-to-Qiime2" class="headerlink" title="Import Roche 454 sff to Qiime2"></a>Import Roche 454 sff to Qiime2</h1><h2 id="Install-sff2fastq"><a href="#Install-sff2fastq" class="headerlink" title="Install sff2fastq"></a>Install sff2fastq</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># github link format for private project</span></span><br><span class="line"><span class="comment"># git@github.com:xyz1396/454pipeline.git</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line">git <span class="built_in">clone</span> git://github.com/indraniel/sff2fastq.git</span><br><span class="line"><span class="built_in">cd</span> sff2fastq</span><br><span class="line">make</span><br></pre></td></tr></table></figure>

<h2 id="Convert"><a href="#Convert" class="headerlink" title="Convert"></a>Convert</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/miniconda3/etc/profile.d/conda.sh</span><br><span class="line">conda activate qiime2</span><br><span class="line">/mnt/e/xiongyi/454Data_JiaLab-2020.12.31/from454sff/sff2fastq/sff2fastq \</span><br><span class="line">  -o qu1.fq \</span><br><span class="line">  JDH5BEV01qu1.sff</span><br><span class="line">/mnt/e/xiongyi/454Data_JiaLab-2020.12.31/from454sff/sff2fastq/sff2fastq \</span><br><span class="line">  -o qu2.fq \</span><br><span class="line">  JDH5BEV02qu2.sff</span><br><span class="line"><span class="built_in">cat</span> qu*.fq &gt; all.fq</span><br><span class="line"><span class="comment"># some base is Q, dada2 cannot parse it</span></span><br><span class="line">seqkit grep -s -p <span class="string">&#x27;Q&#x27;</span> all.fq &gt; all.error.fq</span><br><span class="line">seqkit grep -s -v -p <span class="string">&#x27;Q&#x27;</span> all.fq &gt; all.fix.fq</span><br></pre></td></tr></table></figure>

<h2 id="Import"><a href="#Import" class="headerlink" title="Import"></a>Import</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/miniconda3/etc/profile.d/conda.sh</span><br><span class="line">conda activate qiime2</span><br><span class="line">gzip -c all.fix.fq &gt; all.fastq.gz</span><br><span class="line">qiime tools import \</span><br><span class="line">  --<span class="built_in">type</span> MultiplexedSingleEndBarcodeInSequence \</span><br><span class="line">  --input-path all.fastq.gz \</span><br><span class="line">  --output-path multiplexed-seqs.qza</span><br></pre></td></tr></table></figure>

<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">library<span class="punctuation">(</span>readxl<span class="punctuation">)</span></span><br><span class="line">df<span class="operator">&lt;-</span>read_xlsx<span class="punctuation">(</span><span class="string">&quot;sampleList.xlsx&quot;</span><span class="punctuation">)</span></span><br><span class="line">df2<span class="operator">&lt;-</span>data.frame<span class="punctuation">(</span></span><br><span class="line">  `sample-id` <span class="operator">=</span> paste0<span class="punctuation">(</span><span class="string">&quot;J&quot;</span><span class="punctuation">,</span>df<span class="operator">$</span>NO.<span class="punctuation">)</span><span class="punctuation">,</span></span><br><span class="line">  barcode<span class="operator">=</span>df<span class="operator">$</span>Tag</span><br><span class="line"><span class="punctuation">)</span></span><br><span class="line">colnames<span class="punctuation">(</span>df2<span class="punctuation">)</span> <span class="operator">&lt;-</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="string">&quot;sample-id&quot;</span><span class="punctuation">,</span> <span class="string">&quot;Barcode&quot;</span><span class="punctuation">)</span></span><br><span class="line">write.table<span class="punctuation">(</span></span><br><span class="line">  df2<span class="punctuation">,</span></span><br><span class="line">  <span class="string">&quot;metadata.tsv&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="built_in">quote</span> <span class="operator">=</span> <span class="built_in">F</span><span class="punctuation">,</span></span><br><span class="line">  row.names <span class="operator">=</span> <span class="built_in">F</span><span class="punctuation">,</span></span><br><span class="line">  sep <span class="operator">=</span> <span class="string">&quot;\t&quot;</span></span><br><span class="line"><span class="punctuation">)</span></span><br></pre></td></tr></table></figure>

<h2 id="Demux-1"><a href="#Demux-1" class="headerlink" title="Demux"></a>Demux</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/miniconda3/etc/profile.d/conda.sh</span><br><span class="line">conda activate qiime2</span><br><span class="line">qiime cutadapt demux-single \</span><br><span class="line">  --i-seqs multiplexed-seqs.qza \</span><br><span class="line">  --m-barcodes-file metadata.tsv \</span><br><span class="line">  --m-barcodes-column Barcode \</span><br><span class="line">  --p-error-rate 0 \</span><br><span class="line">  --o-per-sample-sequences demultiplexed-seqs.qza \</span><br><span class="line">  --o-untrimmed-sequences untrimmed.qza \</span><br><span class="line">  --verbose</span><br></pre></td></tr></table></figure>

<h2 id="Trim-adapters-1"><a href="#Trim-adapters-1" class="headerlink" title="Trim adapters"></a>Trim adapters</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/miniconda3/etc/profile.d/conda.sh</span><br><span class="line">conda activate qiime2</span><br><span class="line">qiime cutadapt trim-single \</span><br><span class="line">  --i-demultiplexed-sequences demultiplexed-seqs.qza \</span><br><span class="line">  --p-front GTGCCAGCMGCCGCGG \</span><br><span class="line">  --p-error-rate 0 \</span><br><span class="line">  --o-trimmed-sequences trimmed-seqs.qza \</span><br><span class="line">  --verbose</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/miniconda3/etc/profile.d/conda.sh</span><br><span class="line">conda activate qiime2</span><br><span class="line">qiime demux summarize \</span><br><span class="line">  --i-data trimmed-seqs.qza \</span><br><span class="line">  --o-visualization trimmed-seqs.qzv</span><br></pre></td></tr></table></figure>

<h2 id="For-splited-sff-file"><a href="#For-splited-sff-file" class="headerlink" title="For splited sff file"></a>For splited sff file</h2><h3 id="convert"><a href="#convert" class="headerlink" title="convert"></a>convert</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ls</span> ../data/sff/ | xargs -n 1 -P 4 \</span><br><span class="line">  bash -c <span class="string">&#x27;../sff2fastq/sff2fastq -o ../data/fastq/$0.fq ../data/sff/$0&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="Make-meta-data"><a href="#Make-meta-data" class="headerlink" title="Make meta data"></a>Make meta data</h3><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">library<span class="punctuation">(</span>stringr<span class="punctuation">)</span></span><br><span class="line">fileName<span class="operator">&lt;-</span>dir<span class="punctuation">(</span><span class="string">&quot;../data/fastq/&quot;</span><span class="punctuation">)</span></span><br><span class="line"><span class="comment"># 454Reads.MID_43.sff.fq is empty</span></span><br><span class="line">fileName<span class="operator">&lt;-</span>fileName<span class="punctuation">[</span>fileName<span class="operator">!=</span><span class="string">&quot;454Reads.MID_43.sff.fq&quot;</span><span class="punctuation">]</span></span><br><span class="line">sampleID<span class="operator">&lt;-</span>str_split<span class="punctuation">(</span>fileName<span class="punctuation">,</span><span class="string">&quot;\\.&quot;</span><span class="punctuation">,</span>simplify <span class="operator">=</span> <span class="built_in">T</span><span class="punctuation">)</span><span class="punctuation">[</span><span class="punctuation">,</span><span class="number">2</span><span class="punctuation">]</span></span><br><span class="line">filePath<span class="operator">&lt;-</span>paste0<span class="punctuation">(</span><span class="string">&quot;/mnt/e/xiongyi/454Data_JiaLab-2020.12.31/from454sff/data/fastq/&quot;</span><span class="punctuation">,</span>fileName<span class="punctuation">)</span></span><br><span class="line">df <span class="operator">&lt;-</span> data.frame<span class="punctuation">(</span></span><br><span class="line">  `sample-id` <span class="operator">=</span> sampleID<span class="punctuation">,</span></span><br><span class="line">  `absolute-filepath` <span class="operator">=</span> filePath<span class="punctuation">,</span></span><br><span class="line">  stringsAsFactors <span class="operator">=</span> <span class="built_in">F</span></span><br><span class="line"><span class="punctuation">)</span></span><br><span class="line">colnames<span class="punctuation">(</span>df<span class="punctuation">)</span> <span class="operator">&lt;-</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="string">&quot;sample-id&quot;</span><span class="punctuation">,</span> <span class="string">&quot;absolute-filepath&quot;</span><span class="punctuation">)</span></span><br><span class="line">write.table<span class="punctuation">(</span></span><br><span class="line">  df<span class="punctuation">,</span></span><br><span class="line">  <span class="string">&quot;../data/metadata.tsv&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="built_in">quote</span> <span class="operator">=</span> <span class="built_in">F</span><span class="punctuation">,</span></span><br><span class="line">  row.names <span class="operator">=</span> <span class="built_in">F</span><span class="punctuation">,</span></span><br><span class="line">  sep <span class="operator">=</span> <span class="string">&quot;\t&quot;</span></span><br><span class="line"><span class="punctuation">)</span></span><br></pre></td></tr></table></figure>

<h3 id="Import-to-qiime"><a href="#Import-to-qiime" class="headerlink" title="Import to qiime"></a>Import to qiime</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/miniconda3/etc/profile.d/conda.sh</span><br><span class="line">conda activate qiime2</span><br><span class="line">qiime tools import \</span><br><span class="line">  --<span class="built_in">type</span> <span class="string">&#x27;SampleData[SequencesWithQuality]&#x27;</span> \</span><br><span class="line">  --input-path ../data/metadata.tsv \</span><br><span class="line">  --output-path ../data/fastq.qza \</span><br><span class="line">  --input-format SingleEndFastqManifestPhred33V2</span><br><span class="line"></span><br><span class="line"><span class="comment"># check quality</span></span><br><span class="line">qiime demux summarize \</span><br><span class="line">    --i-data ../data/fastq.qza \</span><br><span class="line">    --o-visualization ../temp/qcSummary.qzv</span><br></pre></td></tr></table></figure>

<h3 id="Remove-primer-1"><a href="#Remove-primer-1" class="headerlink" title="Remove primer"></a>Remove primer</h3><p>515F GTGCCAGCMGCCGCGG 907R CCGTCAATTCMTTTRAGTTT</p>
<p>remove sequence shorter than 300</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/miniconda3/etc/profile.d/conda.sh</span><br><span class="line">conda activate qiime2</span><br><span class="line">qiime cutadapt trim-single \</span><br><span class="line">  --p-cores 6 \</span><br><span class="line">  --i-demultiplexed-sequences ../data/fastq.qza \</span><br><span class="line">  --p-adapter GTGCCAGCMGCCGCGG...AAACTYAAAKGAATTGACGG \</span><br><span class="line">  --p-error-rate 0.2 \</span><br><span class="line">  --p-minimum-length 300 \</span><br><span class="line">  --o-trimmed-sequences ../temp/fastq.primer_trimed.qza \</span><br><span class="line">  --verbose &amp;&gt; ../temp/fastq.primer_trimed.log</span><br><span class="line">  </span><br><span class="line">qiime demux summarize \</span><br><span class="line">    --i-data ../temp/fastq.primer_trimed.qza \</span><br><span class="line">    --o-visualization ../temp/fastq.primer_trimed.qcSummary.qzv</span><br></pre></td></tr></table></figure>

<h1 id="Get-ASV-by-dada2"><a href="#Get-ASV-by-dada2" class="headerlink" title="Get ASV by dada2"></a>Get ASV by dada2</h1><h2 id="454-single-end"><a href="#454-single-end" class="headerlink" title="454 single end"></a>454 single end</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/miniconda3/etc/profile.d/conda.sh</span><br><span class="line">conda activate qiime2</span><br><span class="line">qiime dada2 denoise-pyro \</span><br><span class="line">  --p-trunc-len 370 \</span><br><span class="line">  --i-demultiplexed-seqs primer_trimed.qza \</span><br><span class="line">  --p-n-threads 6 \</span><br><span class="line">  --o-table fastq370.table.qza \</span><br><span class="line">  --o-representative-sequences fastq370.rep-seqs.qza \</span><br><span class="line">  --o-denoising-stats fastq370.denoising-stats.qza</span><br><span class="line"></span><br><span class="line">qiime metadata tabulate \</span><br><span class="line">    --m-input-file fastq370.denoising-stats.qza \</span><br><span class="line">    --o-visualization fastq370.denoising-stats.qzv</span><br></pre></td></tr></table></figure>

<h2 id="illumina-paired-end"><a href="#illumina-paired-end" class="headerlink" title="illumina paired end"></a>illumina paired end</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">qiime dada2 denoise-paired \</span><br><span class="line">  --p-trunc-len-f 200 \</span><br><span class="line">  --p-trunc-len-r 200 \</span><br><span class="line">  --i-demultiplexed-seqs ../temp/primer_trimed.qza \</span><br><span class="line">  --p-n-threads 6 \</span><br><span class="line">  --o-table ../temp/fastq370.table.qza \</span><br><span class="line">  --o-representative-sequences ../temp/fastq370.rep-seqs.qza \</span><br><span class="line">  --o-denoising-stats ../temp/fastq370.denoising-stats.qza</span><br><span class="line">  </span><br><span class="line">qiime metadata tabulate \</span><br><span class="line">    --m-input-file ../temp/fastq370.denoising-stats.qza \</span><br><span class="line">    --o-visualization ../temp/fastq370.denoising-stats.qzv</span><br></pre></td></tr></table></figure>

<h1 id="Get-ASV-by-deblur"><a href="#Get-ASV-by-deblur" class="headerlink" title="Get ASV by deblur"></a>Get ASV by deblur</h1><p>only support single end, merge it firstly</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/miniconda3/etc/profile.d/conda.sh</span><br><span class="line">conda activate qiime2</span><br><span class="line">qiime vsearch merge-pairs \</span><br><span class="line">   --p-threads 6 \</span><br><span class="line">   --i-demultiplexed-seqs ../temp/primer_trimed.qza \</span><br><span class="line">   --p-minmergelen 370 \</span><br><span class="line">   --o-merged-sequences ../temp/merge.qza</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/miniconda3/etc/profile.d/conda.sh</span><br><span class="line">conda activate qiime2</span><br><span class="line">qiime deblur denoise-16S \</span><br><span class="line">  --p-jobs-to-start 6 \</span><br><span class="line">  --p-trim-length 370 \</span><br><span class="line">  --i-demultiplexed-seqs ../temp/merge.qza \</span><br><span class="line">  --p-sample-stats \</span><br><span class="line">  --o-representative-sequences ../temp/fastq370.rep-seqs.qza \</span><br><span class="line">  --o-table ../temp/fastq370.table.qza \</span><br><span class="line">  --o-stats ../temp/fastq370.denoising-stats.qza</span><br></pre></td></tr></table></figure>

<h1 id="Cluster-Feature"><a href="#Cluster-Feature" class="headerlink" title="Cluster Feature"></a>Cluster Feature</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/miniconda3/etc/profile.d/conda.sh</span><br><span class="line">conda activate qiime2</span><br><span class="line">qiime vsearch cluster-features-de-novo \</span><br><span class="line">  --i-sequences fastq370.rep-seqs.qza \</span><br><span class="line">  --i-table fastq370.table.qza \</span><br><span class="line">  --p-perc-identity 0.97 \</span><br><span class="line">  --o-clustered-table fastq370.97.table.qza \</span><br><span class="line">  --o-clustered-sequences fastq370.97.seq.qza \</span><br><span class="line">  --p-threads 6</span><br></pre></td></tr></table></figure>

<h1 id="Make-annotation-database"><a href="#Make-annotation-database" class="headerlink" title="Make annotation database"></a>Make annotation database</h1><p><a href="https://docs.qiime2.org/2021.2/data-resources/">QIIME2 Data resources</a><br><a href="https://data.qiime2.org/2021.2/common/silva-138-99-seqs.qza">Silva 138 SSURef NR99 full-length<br>sequences</a><br><a href="https://data.qiime2.org/2021.2/common/silva-138-99-tax.qza">Silva 138 SSURef NR99 full-length<br>taxonomy</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /mnt/e/xiongyi/454Data_JiaLab-2020.12.31/2021xiongyiAnalysis/db/SILVA_138</span><br><span class="line">qiime feature-classifier extract-reads \</span><br><span class="line">  --i-sequences silva-138-99-seqs.qza \</span><br><span class="line">  --p-f-primer GTGCCAGCMGCCGCGG \</span><br><span class="line">  --p-r-primer CCGTCAATTCMTTTRAGTTT \</span><br><span class="line">  --p-min-length 200 \</span><br><span class="line">  --p-max-length 500 \</span><br><span class="line">  --o-reads silva-138-99-seqs_515F_907R.qza \</span><br><span class="line">  --p-n-jobs 5</span><br><span class="line"></span><br><span class="line">qiime feature-classifier fit-classifier-naive-bayes \</span><br><span class="line">   --i-reference-reads silva-138-99-seqs_515F_907R.qza \</span><br><span class="line">   --i-reference-taxonomy silva-138-99-tax.qza \</span><br><span class="line">   --o-classifier silva138_515F_907R_classifier.qza</span><br><span class="line">   </span><br><span class="line">qiime feature-classifier classify-sklearn \</span><br><span class="line">  --i-reads ../../denovo.clustered.seq.qza \</span><br><span class="line">  --i-classifier silva138_515F_907R_classifier.qza \</span><br><span class="line">  --o-classification ../../denovo.clustered.taxonomy.naive_bayes.qza </span><br><span class="line">  <span class="comment"># need ram larger than 32 gb</span></span><br><span class="line">  <span class="comment"># --p-n-jobs 3</span></span><br></pre></td></tr></table></figure>

<h1 id="Species-annotation"><a href="#Species-annotation" class="headerlink" title="Species annotation"></a>Species annotation</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/miniconda3/etc/profile.d/conda.sh</span><br><span class="line">conda activate qiime2</span><br><span class="line">qiime feature-classifier classify-sklearn \</span><br><span class="line">  --i-reads fastq370.97.seq.qza \</span><br><span class="line">  --i-classifier /mnt/e/xiongyi/454Data_JiaLab-2020.12.31/2021xiongyiAnalysis/db/SILVA_138/silva138_515F_907R_classifier.qza \</span><br><span class="line">  --o-classification denovo.clustered.naive_bayes_taxonomy.qza \</span><br><span class="line">  --p-n-jobs 1</span><br></pre></td></tr></table></figure>

<h1 id="Export-OTU-table-and-sequence"><a href="#Export-OTU-table-and-sequence" class="headerlink" title="Export OTU table and sequence"></a>Export OTU table and sequence</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/miniconda3/etc/profile.d/conda.sh</span><br><span class="line">conda activate qiime2</span><br><span class="line">qiime tools <span class="built_in">export</span> \</span><br><span class="line">  --input-path fastq370.97.seq.qza \</span><br><span class="line">  --output-path .</span><br><span class="line"></span><br><span class="line">qiime tools <span class="built_in">export</span> \</span><br><span class="line">  --input-path fastq370.97.table.qza \</span><br><span class="line">  --output-path .</span><br><span class="line">  </span><br><span class="line">biom convert -i feature-table.biom \</span><br><span class="line">  -o feature-table.tsv --to-tsv</span><br><span class="line">  </span><br><span class="line">qiime tools <span class="built_in">export</span> \</span><br><span class="line">  --input-path denovo.clustered.naive_bayes_taxonomy.qza \</span><br><span class="line">  --output-path .</span><br></pre></td></tr></table></figure>

<h1 id="Select-OTU-with-more-than-1-sequence"><a href="#Select-OTU-with-more-than-1-sequence" class="headerlink" title="Select OTU with more than 1 sequence"></a>Select OTU with more than 1 sequence</h1><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">library<span class="punctuation">(</span>tidyverse<span class="punctuation">)</span></span><br><span class="line">otu <span class="operator">&lt;-</span> read.table<span class="punctuation">(</span><span class="string">&quot;feature-table.tsv&quot;</span><span class="punctuation">,</span>header <span class="operator">=</span> <span class="built_in">T</span><span class="punctuation">,</span></span><br><span class="line">                  sep <span class="operator">=</span> <span class="string">&quot;\t&quot;</span><span class="punctuation">,</span>comment.char<span class="operator">=</span><span class="string">&quot;&quot;</span><span class="punctuation">,</span>skip<span class="operator">=</span><span class="number">1</span><span class="punctuation">)</span></span><br><span class="line">colnames<span class="punctuation">(</span>otu<span class="punctuation">)</span><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span><span class="operator">&lt;-</span><span class="string">&quot;OTU.ID&quot;</span></span><br><span class="line">tax <span class="operator">&lt;-</span> read.table<span class="punctuation">(</span><span class="string">&quot;taxonomy.tsv&quot;</span><span class="punctuation">,</span></span><br><span class="line">                  header <span class="operator">=</span> <span class="built_in">T</span><span class="punctuation">,</span></span><br><span class="line">                  sep <span class="operator">=</span> <span class="string">&quot;\t&quot;</span><span class="punctuation">)</span></span><br><span class="line"><span class="comment"># 3 OTU without annotation</span></span><br><span class="line"><span class="built_in">sum</span><span class="punctuation">(</span>tax<span class="operator">$</span>Taxon <span class="operator">==</span> <span class="string">&quot;Unassigned&quot;</span><span class="punctuation">)</span></span><br><span class="line"><span class="comment"># tax&lt;-tax[tax$Taxon != &quot;Unassigned&quot;,]</span></span><br><span class="line"><span class="built_in">sum</span><span class="punctuation">(</span><span class="built_in">is.na</span><span class="punctuation">(</span>tax<span class="operator">$</span>Taxon<span class="punctuation">)</span><span class="punctuation">)</span></span><br><span class="line">rankTaxon <span class="operator">&lt;-</span> data.frame<span class="punctuation">(</span>Taxon <span class="operator">=</span> tax<span class="operator">$</span>Taxon<span class="punctuation">)</span></span><br><span class="line">rankTaxon <span class="operator">&lt;-</span></span><br><span class="line">  separate<span class="punctuation">(</span>rankTaxon<span class="punctuation">,</span> Taxon<span class="punctuation">,</span> sep <span class="operator">=</span> <span class="string">&quot;; &quot;</span><span class="punctuation">,</span> into <span class="operator">=</span> <span class="built_in">as.character</span><span class="punctuation">(</span><span class="number">1</span><span class="operator">:</span><span class="number">7</span><span class="punctuation">)</span><span class="punctuation">)</span></span><br><span class="line">colnames<span class="punctuation">(</span>rankTaxon<span class="punctuation">)</span> <span class="operator">&lt;-</span></span><br><span class="line">  <span class="built_in">c</span><span class="punctuation">(</span><span class="string">&quot;Kingdom&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;Phylum&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;Class&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;Order&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;Family&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;Genus&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;Species&quot;</span><span class="punctuation">)</span></span><br><span class="line">rankTaxon <span class="operator">&lt;-</span> cbind<span class="punctuation">(</span>id <span class="operator">=</span> tax<span class="operator">$</span>Feature.ID<span class="punctuation">,</span></span><br><span class="line">                   rankTaxon<span class="punctuation">,</span></span><br><span class="line">                   Confidence <span class="operator">=</span> tax<span class="operator">$</span>Confidence<span class="punctuation">)</span></span><br><span class="line">otuWithTax <span class="operator">&lt;-</span> right_join<span class="punctuation">(</span>otu<span class="punctuation">,</span> rankTaxon<span class="punctuation">,</span> by <span class="operator">=</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="string">&quot;OTU.ID&quot;</span> <span class="operator">=</span> <span class="string">&quot;id&quot;</span><span class="punctuation">)</span><span class="punctuation">)</span></span><br><span class="line">totalCount <span class="operator">&lt;-</span> rowSums<span class="punctuation">(</span>otuWithTax<span class="punctuation">[</span><span class="punctuation">,</span> <span class="number">2</span><span class="operator">:</span>ncol<span class="punctuation">(</span>otu<span class="punctuation">)</span><span class="punctuation">]</span><span class="punctuation">)</span></span><br><span class="line">totalPercent <span class="operator">&lt;-</span> totalCount <span class="operator">/</span> <span class="built_in">sum</span><span class="punctuation">(</span>totalCount<span class="punctuation">)</span> <span class="operator">*</span> <span class="number">100</span></span><br><span class="line">otuWithTax<span class="operator">$</span>totalCount <span class="operator">&lt;-</span> totalCount</span><br><span class="line">otuWithTax<span class="operator">$</span>totalPercent <span class="operator">&lt;-</span> totalPercent</span><br><span class="line">otuWithTax <span class="operator">&lt;-</span> arrange<span class="punctuation">(</span>otuWithTax<span class="punctuation">,</span> desc<span class="punctuation">(</span>totalCount<span class="punctuation">)</span><span class="punctuation">)</span></span><br><span class="line">otuWithTax<span class="operator">$</span>OTU.IX<span class="operator">&lt;-</span>paste0<span class="punctuation">(</span><span class="string">&quot;OTU&quot;</span><span class="punctuation">,</span><span class="number">1</span><span class="operator">:</span>nrow<span class="punctuation">(</span>otuWithTax<span class="punctuation">)</span><span class="punctuation">)</span></span><br><span class="line">otuWithTax<span class="operator">&lt;-</span>otuWithTax<span class="punctuation">[</span>otuWithTax<span class="operator">$</span>totalCount <span class="operator">&gt;</span> <span class="number">1</span><span class="punctuation">,</span><span class="punctuation">]</span></span><br><span class="line">write.csv<span class="punctuation">(</span>otuWithTax<span class="punctuation">,</span></span><br><span class="line">          <span class="string">&quot;OTUByNaive_bayesSortByOneMore.csv&quot;</span><span class="punctuation">,</span></span><br><span class="line">          row.names <span class="operator">=</span> <span class="built_in">F</span><span class="punctuation">)</span></span><br><span class="line"><span class="comment"># 10787 OTU with more than 1 sequences </span></span><br><span class="line"><span class="built_in">sum</span><span class="punctuation">(</span>otuWithTax<span class="operator">$</span>totalCount <span class="operator">&gt;</span> <span class="number">1</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>16S</category>
      </categories>
      <tags>
        <tag>metagenomic</tag>
        <tag>16s</tag>
      </tags>
  </entry>
  <entry>
    <title>Shotgun metagenomic tutorial</title>
    <url>/2022/08/16/shotgun-metagenomic-tutorial/</url>
    <content><![CDATA[<h1 id="Install-metawrap"><a href="#Install-metawrap" class="headerlink" title="Install metawrap"></a>Install metawrap</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Express Installation</span></span><br><span class="line">conda create --name metawrap --channel ursky metawrap-mg=1.3.2</span><br><span class="line"></span><br><span class="line"><span class="comment"># fix error</span></span><br><span class="line"><span class="comment"># Can&#x27;t locate Bio/Root/Version.pm in </span></span><br><span class="line"><span class="comment"># @INC (you may need to install the Bio::Root::Version module)</span></span><br><span class="line"><span class="built_in">cd</span> ~/miniconda3/envs/metawrap</span><br><span class="line"><span class="built_in">ln</span> -s lib/perl5/site_perl/5.22.0/ perl5</span><br><span class="line"><span class="built_in">which</span> config-metawrap</span><br><span class="line"><span class="built_in">cp</span> ~/config-metawrap ~/miniconda3/envs/metawrap/bin/config-metawrap</span><br><span class="line"></span><br><span class="line"><span class="comment"># fix bowtie2-build-s: symbol lookup error, undefined symbol</span></span><br><span class="line">conda install tbb=2020.2</span><br><span class="line"></span><br><span class="line">conda activate metawrap</span><br></pre></td></tr></table></figure>

<h2 id="Insall-blast-DB"><a href="#Insall-blast-DB" class="headerlink" title="Insall blast DB"></a>Insall blast DB</h2><p><a href="https://www.ibm.com/aspera/connect/">Aspera download link</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ftp</span><br><span class="line">open ftp.ncbi.nlm.nih.gov</span><br><span class="line"><span class="comment"># user</span></span><br><span class="line">anonymous</span><br><span class="line"><span class="built_in">cd</span> /blast/db/</span><br><span class="line">passive</span><br><span class="line">mls nt.*.tar.gz download.list.txt</span><br><span class="line"><span class="built_in">cd</span> /blast/db/v4/</span><br><span class="line">mls nt_v4.*.tar.gz downloadV4.list.txt</span><br><span class="line"><span class="built_in">bye</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">nohup</span> <span class="built_in">cat</span> NCBI.nt.download.list.txt | \</span><br><span class="line">  xargs -n 1 -P 1 \</span><br><span class="line">  bash -c <span class="string">&#x27;~/.aspera/connect/bin/ascp -v -k 1 -T -l `</span></span><br><span class="line"><span class="string">          `1000m -i ~/asperaweb_id_dsa.openssh `</span></span><br><span class="line"><span class="string">          anonftp@ftp.ncbi.nlm.nih.gov:/blast/db/$0 ./&#x27;</span> \</span><br><span class="line">  &gt;&gt; downloadlog.txt 2&gt;&amp;1 &amp;</span><br><span class="line">  </span><br><span class="line"><span class="built_in">nohup</span> <span class="built_in">cat</span> downloadV4.list.txt | \</span><br><span class="line">  xargs -n 1 -P 1 \</span><br><span class="line">  bash -c <span class="string">&#x27;~/.aspera/connect/bin/ascp -v -k 1 -T -l `</span></span><br><span class="line"><span class="string">          `1000m -i ~/asperaweb_id_dsa.openssh `</span></span><br><span class="line"><span class="string">          anonftp@ftp.ncbi.nlm.nih.gov:/blast/db/v4/$0 ./&#x27;</span> \</span><br><span class="line">  &gt;&gt; downloadlog.txt 2&gt;&amp;1 &amp;</span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> nt*.tar.gz; <span class="keyword">do</span> tar xzf <span class="variable">$a</span>; <span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">vim ~/miniconda3/envs/metawrap/bin/config-metawrap</span><br><span class="line">  </span><br><span class="line">~/.aspera/connect/bin/ascp -v -k 1 -T -l 1000m \</span><br><span class="line">  -i ~/asperaweb_id_dsa.openssh \</span><br><span class="line">  anonftp@ftp.ncbi.nlm.nih.gov:/pub/taxonomy/taxdump.tar.gz ./</span><br><span class="line">tar -xvf taxdump.tar.gz</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h2 id="Install-checKM-DB"><a href="#Install-checKM-DB" class="headerlink" title="Install checKM DB"></a>Install checKM DB</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># checkM database</span></span><br><span class="line"><span class="built_in">mkdir</span> CHECKM_DB</span><br><span class="line"><span class="built_in">cd</span> CHECKM_DB</span><br><span class="line">wget \</span><br><span class="line">https://data.ace.uq.edu.au/public/CheckM_databases/checkm_data_2015_01_16.tar.gz</span><br><span class="line">tar -xvf *.tar.gz</span><br><span class="line"><span class="built_in">rm</span> *.gz</span><br><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line">checkm data setRoot CHECKM_DB</span><br></pre></td></tr></table></figure>

<h2 id="Install-Kraken-DB"><a href="#Install-Kraken-DB" class="headerlink" title="Install Kraken DB"></a>Install Kraken DB</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /home/xiongyi/database/KRAKEN_DB</span><br><span class="line"><span class="built_in">cd</span> /home/xiongyi/database/KRAKEN_DB</span><br><span class="line">kraken2-build --download-library bacteria --db MY_KRAKEN2_DB</span><br><span class="line">kraken2-build --download-library archaea --db MY_KRAKEN2_DB</span><br><span class="line">kraken2-build --download-library fungi --db MY_KRAKEN2_DB</span><br><span class="line">kraken2-build --download-library viral --db MY_KRAKEN2_DB</span><br><span class="line"></span><br><span class="line"><span class="comment">#!/bin/sh -login</span></span><br><span class="line"><span class="comment">#PBS -o /home/xiongyi/database/KRAKEN_DB</span></span><br><span class="line"><span class="comment">#PBS -j oe</span></span><br><span class="line"><span class="comment">#PBS -l nodes=1:ppn=24,walltime=999:00:00,mem=120gb</span></span><br><span class="line"><span class="comment">#PBS -N kraken2-build</span></span><br><span class="line"><span class="comment">#PBS -q cpu</span></span><br><span class="line"><span class="built_in">source</span> ~/miniconda3/etc/profile.d/conda.sh</span><br><span class="line">conda activate metawrap</span><br><span class="line"><span class="built_in">cd</span> /home/xiongyi/database/KRAKEN_DB</span><br><span class="line">kraken2-build --build --db MY_KRAKEN2_DB --threads 24</span><br><span class="line"></span><br><span class="line">vim kraken2-build.sh</span><br><span class="line">qsub kraken2-build.sh</span><br></pre></td></tr></table></figure>

<h2 id="Install-salmon-megahit"><a href="#Install-salmon-megahit" class="headerlink" title="Install salmon megahit"></a>Install salmon megahit</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda create -c bioconda -n salmon salmon</span><br><span class="line">conda create -c bioconda -n soil megahit</span><br></pre></td></tr></table></figure>

<h1 id="Unzip"><a href="#Unzip" class="headerlink" title="Unzip"></a>Unzip</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> cai2</span><br><span class="line"><span class="built_in">mkdir</span> cleanFastaq KRAKENreads \</span><br><span class="line">  INITIAL_BINNING BIN_REFINEMENT \</span><br><span class="line">  BIN_REASSEMBLY BLOBOLOGY QUANT_BINS \</span><br><span class="line">  BIN_CLASSIFICATION FUNCT_ANNOT QUANT_CONTIG</span><br><span class="line"></span><br><span class="line"><span class="comment">#!/bin/sh -login</span></span><br><span class="line"><span class="comment">#PBS -o /home/xiongyi/cai2/cleanFastaq</span></span><br><span class="line"><span class="comment">#PBS -j oe</span></span><br><span class="line"><span class="comment">#PBS -l nodes=1:ppn=24,walltime=999:00:00,mem=120gb</span></span><br><span class="line"><span class="comment">#PBS -N unzip-fastaq</span></span><br><span class="line"><span class="comment">#PBS -q cpu </span></span><br><span class="line"><span class="built_in">cd</span> /home/xiongyi/cai2/cleanFastaq</span><br><span class="line">gunzip -c /home/xiongyi/caiyuanfeng/data2/E3_clean_R1.fq.gz &gt; E3_1.fastq</span><br><span class="line">gunzip -c /home/xiongyi/caiyuanfeng/data2/E3_clean_R2.fq.gz &gt; E3_2.fastq</span><br><span class="line">gunzip -c /home/xiongyi/caiyuanfeng/data2/E10_clean_R1.fq.gz &gt; E10_1.fastq</span><br><span class="line">gunzip -c /home/xiongyi/caiyuanfeng/data2/E10_clean_R2.fq.gz &gt; E10_2.fastq</span><br><span class="line">gunzip -c /home/xiongyi/caiyuanfeng/data2/E13_clean_R1.fq.gz &gt; E13_1.fastq</span><br><span class="line">gunzip -c /home/xiongyi/caiyuanfeng/data2/E13_clean_R2.fq.gz &gt; E13_2.fastq</span><br><span class="line">gunzip -c /home/xiongyi/caiyuanfeng/data2/E17_clean_R1.fq.gz &gt; E17_1.fastq</span><br><span class="line">gunzip -c /home/xiongyi/caiyuanfeng/data2/E17_clean_R2.fq.gz &gt; E17_2.fastq</span><br><span class="line"></span><br><span class="line">vim unzip-fastaq.sh</span><br><span class="line">qsub unzip-fastaq.sh</span><br></pre></td></tr></table></figure>

<h1 id="convert-SRR-file-from-NCBI-SRA"><a href="#convert-SRR-file-from-NCBI-SRA" class="headerlink" title="convert SRR file from NCBI SRA"></a>convert SRR file from NCBI SRA</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">source</span> ~/miniconda3/etc/profile.d/conda.sh</span><br><span class="line">conda activate megahit</span><br><span class="line"><span class="built_in">ls</span> SRR*/SRR*.sra | \</span><br><span class="line">  xargs -n 1 -P 8 bash -c \</span><br><span class="line">  <span class="string">&#x27;fastq-dump --split-3 --gzip -O . $0&#x27;</span></span><br></pre></td></tr></table></figure>

<h1 id="Fastq-quality-control"><a href="#Fastq-quality-control" class="headerlink" title="Fastq quality control"></a>Fastq quality control</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">source</span> ~/miniconda3/etc/profile.d/conda.sh</span><br><span class="line">conda activate megahit</span><br><span class="line">files=(SRR*/SRR*.sra)</span><br><span class="line">files=($(<span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$&#123;files[@]&#125;</span>&quot;</span> | <span class="built_in">tr</span> <span class="string">&#x27; &#x27;</span> <span class="string">&#x27;\n&#x27;</span> | <span class="built_in">cut</span> -d <span class="string">&#x27;/&#x27;</span> -f1 | <span class="built_in">tr</span> <span class="string">&#x27;\n&#x27;</span> <span class="string">&#x27; &#x27;</span>))</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;files[@]&#125;</span> | \</span><br><span class="line">  xargs -n 1 -P 2 bash -c \</span><br><span class="line">  <span class="string">&#x27;fastp -i $0_1.fastq.gz -I $0_2.fastq.gz -o $0_clean_1.fq.gz -O $0_clean_2.fq.gz --thread 15&#x27;</span></span><br><span class="line"><span class="built_in">wait</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;files[@]&#125;</span> | \</span><br><span class="line">  xargs -n 1 -P 2 bash -c \</span><br><span class="line">  <span class="string">&#x27;fastp -i $0.fastq.gz -o $0_clean.fq.gz --thread 15&#x27;</span></span><br></pre></td></tr></table></figure>
<h1 id="Assemble"><a href="#Assemble" class="headerlink" title="Assemble"></a>Assemble</h1><h2 id="merge-fastq-firstly"><a href="#merge-fastq-firstly" class="headerlink" title="merge fastq firstly"></a>merge fastq firstly</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh -login</span></span><br><span class="line"><span class="comment">#PBS -o /home/xiongyi/cai2/cleanFastaq</span></span><br><span class="line"><span class="comment">#PBS -j oe</span></span><br><span class="line"><span class="comment">#PBS -l nodes=1:ppn=24,walltime=999:00:00,mem=120gb</span></span><br><span class="line"><span class="comment">#PBS -N merge</span></span><br><span class="line"><span class="comment">#PBS -q cpu</span></span><br><span class="line"><span class="built_in">cd</span> /home/xiongyi/cai2/</span><br><span class="line"><span class="built_in">cat</span> cleanFastaq/*_1.fastq &gt; cleanFastaq/All1.fastq</span><br><span class="line"><span class="built_in">cat</span> cleanFastaq/*_2.fastq &gt; cleanFastaq/All2.fastq</span><br><span class="line"></span><br><span class="line">vim merge.sh</span><br><span class="line"></span><br><span class="line"><span class="comment">#!/bin/sh -login</span></span><br><span class="line"><span class="comment">#PBS -o /home/xiongyi/cai2/</span></span><br><span class="line"><span class="comment">#PBS -j oe</span></span><br><span class="line"><span class="comment">#PBS -l nodes=1:ppn=24,walltime=999:00:00,mem=124gb</span></span><br><span class="line"><span class="comment">#PBS -N megahit</span></span><br><span class="line"><span class="comment">#PBS -q cpu</span></span><br><span class="line"><span class="built_in">source</span> ~/miniconda3/etc/profile.d/conda.sh</span><br><span class="line">conda activate soil</span><br><span class="line"><span class="built_in">cd</span> /home/xiongyi/cai2/</span><br><span class="line">megahit -1 cleanFastaq/All1.fastq \</span><br><span class="line">  -2 cleanFastaq/All2.fastq \</span><br><span class="line">  -o ASSEMBLY \</span><br><span class="line">  --min-count 2 \</span><br><span class="line">  -m 123 \</span><br><span class="line">  --k-list 27,37,47,57,67,77,87 \</span><br><span class="line">  -t 24</span><br><span class="line">  </span><br><span class="line"><span class="built_in">cd</span> /home/xiongyi/cai2/</span><br><span class="line">vim megahit.sh</span><br></pre></td></tr></table></figure>

<h2 id="ensemble-directly"><a href="#ensemble-directly" class="headerlink" title="ensemble directly"></a>ensemble directly</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">source</span> ~/miniconda3/etc/profile.d/conda.sh</span><br><span class="line">conda activate megahit</span><br><span class="line"><span class="keyword">function</span> join_by &#123;</span><br><span class="line">  <span class="built_in">local</span> d=<span class="variable">$&#123;1-&#125;</span> f=<span class="variable">$&#123;2-&#125;</span></span><br><span class="line">  <span class="keyword">if</span> <span class="built_in">shift</span> 2; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">printf</span> %s <span class="string">&quot;<span class="variable">$f</span>&quot;</span> <span class="string">&quot;<span class="variable">$&#123;@/#/$d&#125;</span>&quot;</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line">R1=(*_1.fq.gz)</span><br><span class="line">R1=$(join_by , <span class="string">&quot;<span class="variable">$&#123;R1[@]&#125;</span>&quot;</span>)</span><br><span class="line">R2=(*_2.fq.gz)</span><br><span class="line">R2=$(join_by , <span class="string">&quot;<span class="variable">$&#123;R2[@]&#125;</span>&quot;</span>)</span><br><span class="line">megahit -1 <span class="variable">$R1</span> \</span><br><span class="line">  -2 <span class="variable">$R2</span> \</span><br><span class="line">  -o ../megahitOut \</span><br><span class="line">  --presets meta-large \</span><br><span class="line">  -t 44 </span><br></pre></td></tr></table></figure>

<h1 id="Quantify-contig"><a href="#Quantify-contig" class="headerlink" title="Quantify contig"></a>Quantify contig</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh -login</span></span><br><span class="line"><span class="comment">#PBS -o /home/xiongyi/sunhongyang/MbPL202011862/QUANT_CONTIG</span></span><br><span class="line"><span class="comment">#PBS -j oe</span></span><br><span class="line"><span class="comment">#PBS -l nodes=1:ppn=24,walltime=999:00:00,mem=120gb</span></span><br><span class="line"><span class="comment">#PBS -N QUANT_CONTIG</span></span><br><span class="line"><span class="comment">#PBS -q cpu</span></span><br><span class="line"><span class="built_in">source</span> ~/miniconda3/etc/profile.d/conda.sh</span><br><span class="line">conda activate salmon</span><br><span class="line"><span class="built_in">cd</span> /home/xiongyi/sunhongyang/MbPL202011862/</span><br><span class="line">salmon index -t ASSEMBLY/final.contigs.fa \</span><br><span class="line">  -i QUANT_CONTIG/contig_index \</span><br><span class="line">  --threads 24</span><br><span class="line"><span class="comment"># get fastq name</span></span><br><span class="line">files=(cleanFastaq/*_*.fastq)</span><br><span class="line"><span class="comment"># get sample name</span></span><br><span class="line">files=($(<span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$&#123;files[@]&#125;</span>&quot;</span> | <span class="built_in">tr</span> <span class="string">&#x27; &#x27;</span> <span class="string">&#x27;\n&#x27;</span> | <span class="built_in">cut</span> -d <span class="string">&#x27;_&#x27;</span> -f1 | <span class="built_in">tr</span> <span class="string">&#x27;\n&#x27;</span> <span class="string">&#x27; &#x27;</span>))</span><br><span class="line"><span class="comment"># unique sample name</span></span><br><span class="line">files=($(<span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$&#123;files[@]&#125;</span>&quot;</span> | <span class="built_in">tr</span> <span class="string">&#x27; &#x27;</span> <span class="string">&#x27;\n&#x27;</span> | <span class="built_in">sort</span> -u | <span class="built_in">tr</span> <span class="string">&#x27;\n&#x27;</span> <span class="string">&#x27; &#x27;</span>))</span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> <span class="variable">$&#123;files[@]&#125;</span>; <span class="keyword">do</span> </span><br><span class="line">    salmon quant -i QUANT_CONTIG/contig_index \</span><br><span class="line">    -l A \</span><br><span class="line">    -1 <span class="variable">$&#123;file&#125;</span>_1.fastq \</span><br><span class="line">    -2 <span class="variable">$&#123;file&#125;</span>_2.fastq \</span><br><span class="line">    --validateMappings \</span><br><span class="line">    -o QUANT_CONTIG/<span class="variable">$&#123;file#*/&#125;</span> \</span><br><span class="line">    --threads 24</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">vim QUANT_CONTIG.sh</span><br><span class="line">qsub QUANT_CONTIG.sh</span><br></pre></td></tr></table></figure>

<h1 id="Bining"><a href="#Bining" class="headerlink" title="Bining"></a>Bining</h1><p>no maxbin because maxbin is too slow</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh -login</span></span><br><span class="line"><span class="comment">#PBS -o /home/xiongyi/cai2/INITIAL_BINNING</span></span><br><span class="line"><span class="comment">#PBS -j oe</span></span><br><span class="line"><span class="comment">#PBS -l nodes=1:ppn=24,walltime=999:00:00,mem=120gb</span></span><br><span class="line"><span class="comment">#PBS -N metawrap-binning</span></span><br><span class="line"><span class="comment">#PBS -q cpu</span></span><br><span class="line"><span class="built_in">source</span> ~/miniconda3/etc/profile.d/conda.sh</span><br><span class="line">conda activate metawrap</span><br><span class="line"><span class="built_in">cd</span> /home/xiongyi/cai2/</span><br><span class="line">metawrap binning -o INITIAL_BINNING -t 24 \</span><br><span class="line">  -a ASSEMBLY/final.contigs.fa \</span><br><span class="line">  --metabat2 \</span><br><span class="line">  --concoct cleanFastaq/*_*.fastq \</span><br><span class="line">  --run-checkm</span><br><span class="line">  </span><br><span class="line">vim binning.sh </span><br><span class="line">qsub binning.sh</span><br></pre></td></tr></table></figure>

<h1 id="Species-annotation-of-contigs"><a href="#Species-annotation-of-contigs" class="headerlink" title="Species annotation of contigs"></a>Species annotation of contigs</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh -login</span></span><br><span class="line"><span class="comment">#PBS -o /home/xiongyi/cai2/KRAKENreads</span></span><br><span class="line"><span class="comment">#PBS -j oe</span></span><br><span class="line"><span class="comment">#PBS -l nodes=1:ppn=24,walltime=999:00:00,mem=120gb</span></span><br><span class="line"><span class="comment">#PBS -N kraken-reads-run</span></span><br><span class="line"><span class="comment">#PBS -q cpu</span></span><br><span class="line"><span class="built_in">source</span> ~/miniconda3/etc/profile.d/conda.sh</span><br><span class="line">conda activate metawrap</span><br><span class="line"><span class="built_in">cd</span> /home/xiongyi/cai2/</span><br><span class="line">metawrap kraken2 -o KRAKENreads \</span><br><span class="line">  -t 24 \</span><br><span class="line">  cleanFastaq/*_*.fastq ASSEMBLY/final.contigs.fa</span><br><span class="line"></span><br><span class="line">vim kraken-reads-run.sh </span><br><span class="line">qsub kraken-reads-run.sh</span><br></pre></td></tr></table></figure>

<h1 id="Refine-bin"><a href="#Refine-bin" class="headerlink" title="Refine bin"></a>Refine bin</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh -login</span></span><br><span class="line"><span class="comment">#PBS -o /home/xiongyi/cai2/BIN_REFINEMENT</span></span><br><span class="line"><span class="comment">#PBS -j oe</span></span><br><span class="line"><span class="comment">#PBS -l nodes=1:ppn=24,walltime=999:00:00,mem=120gb</span></span><br><span class="line"><span class="comment">#PBS -N bin_refinement</span></span><br><span class="line"><span class="comment">#PBS -q cpu</span></span><br><span class="line"><span class="built_in">source</span> ~/miniconda3/etc/profile.d/conda.sh</span><br><span class="line">conda activate metawrap</span><br><span class="line"><span class="built_in">cd</span> /home/xiongyi/cai2/</span><br><span class="line">metawrap bin_refinement -o BIN_REFINEMENT \</span><br><span class="line">  -t 24 \</span><br><span class="line">  -A INITIAL_BINNING/metabat2_bins \</span><br><span class="line">  -B INITIAL_BINNING/concoct_bins \</span><br><span class="line">  -c 50 -x 10</span><br><span class="line"></span><br><span class="line">vim bin_refinement.sh </span><br><span class="line">qsub bin_refinement.sh</span><br></pre></td></tr></table></figure>

<h1 id="Visualize-bins"><a href="#Visualize-bins" class="headerlink" title="Visualize bins"></a>Visualize bins</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh -login</span></span><br><span class="line"><span class="comment">#PBS -o /home/xiongyi/cai2/BLOBOLOGY</span></span><br><span class="line"><span class="comment">#PBS -j oe</span></span><br><span class="line"><span class="comment">#PBS -l nodes=1:ppn=24,walltime=999:00:00,mem=120gb</span></span><br><span class="line"><span class="comment">#PBS -N BLOBOLOGY</span></span><br><span class="line"><span class="comment">#PBS -q cpu</span></span><br><span class="line"><span class="built_in">source</span> ~/miniconda3/etc/profile.d/conda.sh</span><br><span class="line">conda activate metawrap</span><br><span class="line"><span class="built_in">cd</span> /home/xiongyi/cai2/</span><br><span class="line">metawrap blobology -a ASSEMBLY/final.contigs.fa \</span><br><span class="line">  -t 24 \</span><br><span class="line">  -o BLOBOLOGY \</span><br><span class="line">  --bins BIN_REFINEMENT/metawrap_50_10_bins \</span><br><span class="line">  cleanFastaq/*_*.fastq</span><br><span class="line"></span><br><span class="line">vim blobology.sh </span><br><span class="line">qsub blobology.sh</span><br></pre></td></tr></table></figure>

<h1 id="Species-annotation-of-bins"><a href="#Species-annotation-of-bins" class="headerlink" title="Species annotation of bins"></a>Species annotation of bins</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh -login</span></span><br><span class="line"><span class="comment">#PBS -o /home/xiongyi/cai2/BIN_CLASSIFICATION</span></span><br><span class="line"><span class="comment">#PBS -j oe</span></span><br><span class="line"><span class="comment">#PBS -l nodes=1:ppn=24,walltime=999:00:00,mem=120gb</span></span><br><span class="line"><span class="comment">#PBS -N BIN_CLASSIFICATION</span></span><br><span class="line"><span class="comment">#PBS -q cpu</span></span><br><span class="line"><span class="built_in">source</span> ~/miniconda3/etc/profile.d/conda.sh</span><br><span class="line">conda activate metawrap</span><br><span class="line"><span class="built_in">cd</span> /home/xiongyi/cai2/</span><br><span class="line">metawrap classify_bins -b BIN_REFINEMENT/metawrap_50_10_bins \</span><br><span class="line">  -o BIN_CLASSIFICATION \</span><br><span class="line">  -t 24</span><br><span class="line">  </span><br><span class="line">vim classfication_bins.sh </span><br></pre></td></tr></table></figure>

<h1 id="Species-annotation-of-proteins"><a href="#Species-annotation-of-proteins" class="headerlink" title="Species annotation of proteins"></a>Species annotation of proteins</h1><p><a href="https://github.com/eggnogdb/eggnog-mapper/wiki/eggNOG-mapper-v2.1.5-to-v2.1.10#user-content-Conda_bioconda_channel_version">install eggnog</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda create -n egg -c bioconda eggnog-mapper</span><br><span class="line"></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="built_in">source</span> ~/miniconda3/etc/profile.d/conda.sh</span><br><span class="line">conda activate egg</span><br><span class="line">wget https://software-ab.cs.uni-tuebingen.de/download/megan-annotree/annotree.fasta.gz</span><br><span class="line">diamond makedb --<span class="keyword">in</span> annotree.fasta.gz --db /scratch/yixiong/diamond/annotree</span><br><span class="line"></span><br><span class="line">diamond blastp --db /scratch/yixiong/diamond/annotree.dmnd \</span><br><span class="line">    --query fasta/db.faa \</span><br><span class="line">    --tmpdir /dev/shm \</span><br><span class="line">    --out diamondAnnoTree \</span><br><span class="line">    --outfmt 100 \</span><br><span class="line">    --threads 30</span><br><span class="line"></span><br><span class="line">~/megan/tools/daa-meganizer \</span><br><span class="line">    -i CO2diamondAnnoTree.daa \</span><br><span class="line">    -mdb ../megan-mapping-annotree-June-2021.db</span><br><span class="line"></span><br><span class="line">~/megan/tools/daa2info \</span><br><span class="line">    -i CO2diamondAnnoTree.daa \</span><br><span class="line">    -o CO2MEGAN-taxonomy-annoTree.txt \</span><br><span class="line">    -mro <span class="literal">true</span> \</span><br><span class="line">    --paths <span class="literal">true</span> \</span><br><span class="line">    -r <span class="literal">true</span> \</span><br><span class="line">    -r2c GTDB</span><br></pre></td></tr></table></figure>

<h1 id="Function-annotation-of-bins"><a href="#Function-annotation-of-bins" class="headerlink" title="Function annotation of bins"></a>Function annotation of bins</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh -login</span></span><br><span class="line"><span class="comment">#PBS -o /home/xiongyi/cai2/FUNCT_ANNOT</span></span><br><span class="line"><span class="comment">#PBS -j oe</span></span><br><span class="line"><span class="comment">#PBS -l nodes=1:ppn=24,walltime=999:00:00,mem=120gb</span></span><br><span class="line"><span class="comment">#PBS -N BIN_FUNCT_ANNOT</span></span><br><span class="line"><span class="comment">#PBS -q cpu</span></span><br><span class="line"><span class="built_in">source</span> ~/miniconda3/etc/profile.d/conda.sh</span><br><span class="line">conda activate metawrap</span><br><span class="line"><span class="built_in">cd</span> /home/xiongyi/cai2/</span><br><span class="line">metaWRAP annotate_bins -o FUNCT_ANNOT -t 24 -b BIN_REFINEMENT/metawrap_50_10_bins</span><br><span class="line"></span><br><span class="line">vim annotate_bins.sh</span><br></pre></td></tr></table></figure>

<h1 id="Function-annotation-of-contigs"><a href="#Function-annotation-of-contigs" class="headerlink" title="Function annotation of contigs"></a>Function annotation of contigs</h1><h2 id="gene-prediction-by-fraggenescan"><a href="#gene-prediction-by-fraggenescan" class="headerlink" title="gene prediction by fraggenescan"></a>gene prediction by fraggenescan</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda create -n fraggenescan -c bioconda -c conda-forge fraggenescan=1.31</span><br><span class="line"></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="built_in">source</span> ~/miniconda3/etc/profile.d/conda.sh</span><br><span class="line">conda activate fraggenescan</span><br><span class="line">run_FragGeneScan.pl \</span><br><span class="line">  -genome=../k87/final.contigs.fa \</span><br><span class="line">  -out=frag \</span><br><span class="line">  -complete=0 \</span><br><span class="line">  -train=complete \</span><br><span class="line">  -thread=40</span><br><span class="line"></span><br><span class="line">vim frag.sh</span><br><span class="line"><span class="built_in">nohup</span> ./frag.sh &gt; frag.log.txt 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>

<h2 id="gene-prediction-by-prodigal"><a href="#gene-prediction-by-prodigal" class="headerlink" title="gene prediction by prodigal"></a>gene prediction by prodigal</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda create -n prodigal -c bioconda -c conda-forge prodigal=2.6.3</span><br><span class="line"></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="built_in">source</span> ~/miniconda3/etc/profile.d/conda.sh</span><br><span class="line">conda activate prodigal</span><br><span class="line">prodigal -i ../k87/final.contigs.fa -o prodigal.genes -a prodigal.faa -p meta</span><br><span class="line"></span><br><span class="line">vim prodigal.sh</span><br><span class="line"><span class="built_in">nohup</span> ./prodigal.sh &gt; prodigal.log.txt 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>

<h2 id="remove-proteins-with-same-seq"><a href="#remove-proteins-with-same-seq" class="headerlink" title="remove proteins with same seq"></a>remove proteins with same seq</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda activate bio</span><br><span class="line">seqkit rmdup frag.faa -s -o fragNodup.fasta -D fragDup.txt</span><br></pre></td></tr></table></figure>

<h2 id="gene-function-annotation"><a href="#gene-function-annotation" class="headerlink" title="gene function annotation"></a>gene function annotation</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/miniconda3/etc/profile.d/conda.sh</span><br><span class="line">conda activate egg</span><br><span class="line"><span class="built_in">export</span> EGGNOG_DATA_DIR=db/egg</span><br><span class="line">emapper.py \</span><br><span class="line">  -i db.faa -o anno \</span><br><span class="line">  --sensmode more-sensitive \</span><br><span class="line">  --tax_scope 2157,2,4751 \</span><br><span class="line">  --cpu 0 --dbmem</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>metagenomic</category>
      </categories>
      <tags>
        <tag>metagenomic</tag>
      </tags>
  </entry>
  <entry>
    <title>Upload 16s amplicon sequencing raw data to NCBI</title>
    <url>/2021/02/23/upload-16s-amplicon-sequencing-raw-data-to-NCBI/</url>
    <content><![CDATA[<h3 id="Introduction-to-16S-and-ITS-rRNA-Sequencing"><a href="#Introduction-to-16S-and-ITS-rRNA-Sequencing" class="headerlink" title="Introduction to 16S and ITS rRNA Sequencing"></a>Introduction to 16S and ITS rRNA Sequencing</h3><p>16S and Internal Transcribed Spacer (ITS) ribosomal RNA (rRNA) sequencing are common amplicon sequencing methods used to identify and compare bacteria or fungi present within a given sample. Both ITS and 16S rRNA gene sequencing are well-established methods for comparing sample phylogeny and taxonomy from complex microbiomes or environments that are difficult or impossible to study.</p>
<h3 id="register-a-NCBI-account"><a href="#register-a-NCBI-account" class="headerlink" title="register a NCBI account"></a>register a NCBI account</h3><p><img src="/2021/02/23/upload-16s-amplicon-sequencing-raw-data-to-NCBI/1.png" alt="img"></p>
<span id="more"></span>

<h3 id="click-submit"><a href="#click-submit" class="headerlink" title="click submit"></a>click submit</h3><p><img src="/2021/02/23/upload-16s-amplicon-sequencing-raw-data-to-NCBI/2.png" alt="img"></p>
<h3 id="add-bioproject"><a href="#add-bioproject" class="headerlink" title="add bioproject"></a>add bioproject</h3><p><img src="/2021/02/23/upload-16s-amplicon-sequencing-raw-data-to-NCBI/3.png" alt="img"></p>
<p><img src="/2021/02/23/upload-16s-amplicon-sequencing-raw-data-to-NCBI/4.png" alt="img"></p>
<p><img src="/2021/02/23/upload-16s-amplicon-sequencing-raw-data-to-NCBI/5.png" alt="img"></p>
<h3 id="choose-project-type-and-next-steps-in-adding-bioproject"><a href="#choose-project-type-and-next-steps-in-adding-bioproject" class="headerlink" title="choose project type and next steps in adding bioproject"></a>choose project type and next steps in adding bioproject</h3><p>choose raw data sequences and metagenome</p>
<p><img src="/2021/02/23/upload-16s-amplicon-sequencing-raw-data-to-NCBI/6.png" alt="img"></p>
<p>sample name should contain “metagenomes”</p>
<p><img src="/2021/02/23/upload-16s-amplicon-sequencing-raw-data-to-NCBI/7.png" alt="img"></p>
<p>don’t add biosample</p>
<p><img src="/2021/02/23/upload-16s-amplicon-sequencing-raw-data-to-NCBI/8.png" alt="img"></p>
<h3 id="add-biosample"><a href="#add-biosample" class="headerlink" title="add biosample"></a>add biosample</h3><p><img src="/2021/02/23/upload-16s-amplicon-sequencing-raw-data-to-NCBI/9.png" alt="img"></p>
<p>choose batch biosamples</p>
<p><img src="/2021/02/23/upload-16s-amplicon-sequencing-raw-data-to-NCBI/10.png" alt="img"></p>
<p>choose single Amplified genome sequences</p>
<p><img src="/2021/02/23/upload-16s-amplicon-sequencing-raw-data-to-NCBI/11.png" alt="img"></p>
<p><img src="/2021/02/23/upload-16s-amplicon-sequencing-raw-data-to-NCBI/11.1.png" alt="img"></p>
<h3 id="fill-the-downloaded-metadata-file-in-Excel-format-and-submit"><a href="#fill-the-downloaded-metadata-file-in-Excel-format-and-submit" class="headerlink" title="fill the downloaded metadata file in Excel format and submit"></a>fill the downloaded metadata file in Excel format and submit</h3><p><img src="/2021/02/23/upload-16s-amplicon-sequencing-raw-data-to-NCBI/12.png" alt="img"></p>
<p><img src="/2021/02/23/upload-16s-amplicon-sequencing-raw-data-to-NCBI/16.png" alt="img"></p>
<h3 id="upload-sequence-read-archive"><a href="#upload-sequence-read-archive" class="headerlink" title="upload sequence read archive"></a>upload sequence read archive</h3><p><img src="/2021/02/23/upload-16s-amplicon-sequencing-raw-data-to-NCBI/13.png" alt="img"></p>
<p>fill the bioprogect accession</p>
<p><img src="/2021/02/23/upload-16s-amplicon-sequencing-raw-data-to-NCBI/14.png" alt="img"></p>
<p><img src="/2021/02/23/upload-16s-amplicon-sequencing-raw-data-to-NCBI/14.1.png" alt="img"></p>
<p>fill the downloaded metadata file in Excel format and submit. Sequences<br>of different sample should be splited to different files. Every fastq<br>file or gz file should have a corresponding biosample.</p>
<p><img src="/2021/02/23/upload-16s-amplicon-sequencing-raw-data-to-NCBI/15.png" alt="img"></p>
<p>you should install aspera plugin before upload to speed up the data<br>transmission</p>
<p><img src="/2021/02/23/upload-16s-amplicon-sequencing-raw-data-to-NCBI/17.png" alt="img"></p>
]]></content>
      <categories>
        <category>16S</category>
      </categories>
      <tags>
        <tag>metagenomic</tag>
        <tag>16s</tag>
      </tags>
  </entry>
</search>
